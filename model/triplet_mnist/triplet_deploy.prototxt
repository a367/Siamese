name: "triplet_deploy"

###############
### input   ###
###############

layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param { shape: { dim: 60000 dim: 1 dim: 28 dim: 28 } }
}

#layer {
#  name: "sim"
#  type: "Input"
#  top: "sim"
#  input_param { shape: { dim: 70000} }
#}
#
#layer {
#  name: "threshold"
#  type: "Input"
#  top: "threshold"
#  input_param { shape: { dim: 1} }
#
#}


###############
### slice   ###
###############

#layer {
#  name: "slice_pair"
#  type: "Slice"
#  bottom: "triplet_data"
#  top: "data"
#  top: "data_p"
#  slice_param {
#    slice_dim: 1
#    slice_point: 1
#  }
#}


###############
### data  1 ###
###############

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  inner_product_param {
    num_output: 500
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  inner_product_param {
    num_output: 10
  }
}
layer {
  name: "feat"
  type: "InnerProduct"
  bottom: "ip2"
  top: "feat"
  inner_product_param {
    num_output: 2
  }
}

#layer {
#  name: "l2_norm"
#  type: "Python"
#  bottom: "feat"
#  top: "l2_feat"
#  python_param {
#    module: "pyloss"
#    layer: "Norm2Layer"
#  }
#}


################
#### data  2 ###
################
#
#layer {
#  name: "conv1_p"
#  type: "Convolution"
#  bottom: "data_p"
#  top: "conv1_p"
#  convolution_param {
#    num_output: 20
#    kernel_size: 5
#    stride: 1
#  }
#}
#layer {
#  name: "pool1_p"
#  type: "Pooling"
#  bottom: "conv1_p"
#  top: "pool1_p"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#layer {
#  name: "conv2_p"
#  type: "Convolution"
#  bottom: "pool1_p"
#  top: "conv2_p"
#  convolution_param {
#    num_output: 50
#    kernel_size: 5
#    stride: 1
#  }
#}
#layer {
#  name: "pool2_p"
#  type: "Pooling"
#  bottom: "conv2_p"
#  top: "pool2_p"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#layer {
#  name: "ip1_p"
#  type: "InnerProduct"
#  bottom: "pool2_p"
#  top: "ip1_p"
#  inner_product_param {
#    num_output: 500
#  }
#}
#layer {
#  name: "relu1_p"
#  type: "ReLU"
#  bottom: "ip1_p"
#  top: "ip1_p"
#}
#layer {
#  name: "ip2_p"
#  type: "InnerProduct"
#  bottom: "ip1_p"
#  top: "ip2_p"
#  inner_product_param {
#    num_output: 10
#  }
#}
#layer {
#  name: "feat_p"
#  type: "InnerProduct"
#  bottom: "ip2_p"
#  top: "feat_p"
#  inner_product_param {
#    num_output: 2
#  }
#}
#
#layer {
#  name: "l2_norm_2"
#  type: "Python"
#  bottom: "feat_p"
#  top: "l2_feat_p"
#  python_param {
#    module: "pyloss"
#    layer: "Norm2Layer"
#  }
#}
#
################
#### data  3 ###
################
#
#layer {
#  name: "conv1_m"
#  type: "Convolution"
#  bottom: "data_m"
#  top: "conv1_m"
#  param {
#    name: "conv1_w"
#    lr_mult: 1
#  }
#  param {
#    name: "conv1_b"
#    lr_mult: 2
#  }
#  convolution_param {
#    num_output: 20
#    kernel_size: 5
#    stride: 1
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#layer {
#  name: "pool1_m"
#  type: "Pooling"
#  bottom: "conv1_m"
#  top: "pool1_m"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#layer {
#  name: "conv2_m"
#  type: "Convolution"
#  bottom: "pool1_m"
#  top: "conv2_m"
#  param {
#    name: "conv2_w"
#    lr_mult: 1
#  }
#  param {
#    name: "conv2_b"
#    lr_mult: 2
#  }
#  convolution_param {
#    num_output: 50
#    kernel_size: 5
#    stride: 1
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#layer {
#  name: "pool2_m"
#  type: "Pooling"
#  bottom: "conv2_m"
#  top: "pool2_m"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#layer {
#  name: "ip1_m"
#  type: "InnerProduct"
#  bottom: "pool2_m"
#  top: "ip1_m"
#  param {
#    name: "ip1_w"
#    lr_mult: 1
#  }
#  param {
#    name: "ip1_b"
#    lr_mult: 2
#  }
#  inner_product_param {
#    num_output: 500
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#layer {
#  name: "relu1_m"
#  type: "ReLU"
#  bottom: "ip1_m"
#  top: "ip1_m"
#}
#layer {
#  name: "ip2_m"
#  type: "InnerProduct"
#  bottom: "ip1_m"
#  top: "ip2_m"
#  param {
#    name: "ip2_w"
#    lr_mult: 1
#  }
#  param {
#    name: "ip2_b"
#    lr_mult: 2
#  }
#  inner_product_param {
#    num_output: 10
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#layer {
#  name: "feat_m"
#  type: "InnerProduct"
#  bottom: "ip2_m"
#  top: "feat_m"
#  param {
#    name: "feat_w"
#    lr_mult: 1
#  }
#  param {
#    name: "feat_b"
#    lr_mult: 2
#  }
#  inner_product_param {
#    num_output: 2
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#
#layer {
#  name: "l2_norm_3"
#  type: "Python"
#  bottom: "feat_m"
#  top: "l2_feat_m"
#  python_param {
#    module: "pyloss"
#    layer: "Norm2Layer"
#  }
#}


###################
###   accuracy  ###
###################


#layer {
#  name: "loss"
#  type: "ContrastiveLoss"
#  bottom: "feat"
#  bottom: "feat_p"
#  bottom: "sim"
#  top: "loss"
#  contrastive_loss_param {
#    margin: 1
##    legacy_version: true
#  }
#}

#layer {
#  name: "accuracy"
#  type: "Python"
#  bottom: "feat"
#  bottom: "feat_p"
#
##  bottom: "l2_feat"
##  bottom: "l2_feat_p"
#
#  bottom: 'sim'
#  bottom: 'threshold'
#
#  top: "accuracy"
#  top: "TPR"
#  top: "FPR"
#
#  python_param {
#    module: "pyloss"
#    layer: "VerificationLayer"
#  }
#}










