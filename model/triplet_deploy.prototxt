name: "triplet_deploy"

###############
### input   ###
###############

layer {
  name: "pair_data"
  type: "Input"
  top: "pair_data"
  input_param { shape: { dim: 10000 dim: 2 dim: 28 dim: 28 } }
}

layer {
  name: "sim"
  type: "Input"
  top: "sim"
  input_param { shape: { dim: 10000} }
}

layer {
  name: "threshold"
  type: "Input"
  top: "threshold"
  input_param { shape: { dim: 1} }

}


###############
### slice   ###
###############

layer {
  name: "slice_pair"
  type: "Slice"
  bottom: "pair_data"
  top: "data"
  top: "data_p"
  slice_param {
    slice_dim: 1
    slice_point: 1
  }
}


###############
### data  1 ###
###############

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  inner_product_param {
    num_output: 500
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  inner_product_param {
    num_output: 10
  }
}
layer {
  name: "feat"
  type: "InnerProduct"
  bottom: "ip2"
  top: "feat"
  inner_product_param {
    num_output: 2
  }
}

layer {
  name: "l2_norm_1"
  type: "Python"
  bottom: "feat"
  top: "l2_feat"
  python_param {
    module: "pyloss"
    layer: "Norm2Layer"
  }
}


###############
### data  2 ###
###############

layer {
  name: "conv1_p"
  type: "Convolution"
  bottom: "data_p"
  top: "conv1_p"
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "pool1_p"
  type: "Pooling"
  bottom: "conv1_p"
  top: "pool1_p"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_p"
  type: "Convolution"
  bottom: "pool1_p"
  top: "conv2_p"
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "pool2_p"
  type: "Pooling"
  bottom: "conv2_p"
  top: "pool2_p"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1_p"
  type: "InnerProduct"
  bottom: "pool2_p"
  top: "ip1_p"
  inner_product_param {
    num_output: 500
  }
}
layer {
  name: "relu1_p"
  type: "ReLU"
  bottom: "ip1_p"
  top: "ip1_p"
}
layer {
  name: "ip2_p"
  type: "InnerProduct"
  bottom: "ip1_p"
  top: "ip2_p"
  inner_product_param {
    num_output: 10
  }
}
layer {
  name: "feat_p"
  type: "InnerProduct"
  bottom: "ip2_p"
  top: "feat_p"
  inner_product_param {
    num_output: 2
  }
}

layer {
  name: "l2_norm_2"
  type: "Python"
  bottom: "feat_p"
  top: "l2_feat_p"
  python_param {
    module: "pyloss"
    layer: "Norm2Layer"
  }
}

###################
###   accuracy  ###
###################


#layer {
#  name: "loss"
#  type: "ContrastiveLoss"
#  bottom: "feat"
#  bottom: "feat_p"
#  bottom: "sim"
#  top: "loss"
#  contrastive_loss_param {
#    margin: 1
##    legacy_version: true
#  }
#}

layer {
  name: "accuracy"
  type: "Python"
#  bottom: "feat"
#  bottom: "feat_p"

  bottom: "l2_feat"
  bottom: "l2_feat_p"

  bottom: 'sim'
  bottom: 'threshold'

  top: "accuracy"
  top: "TPR"
  top: "FPR"

  python_param {
    module: "pyloss"
    layer: "EuclideanDistanceLayer"
  }
}